
#!/usr/bin/python3
#Written by Roberto Rodriguez Jr & ChatGPT hardkorebob@gmail.com
#$%&*^_H4x0R_zettlekastenrhok_software by HARDKOREBOB.github.io
#FREE WARRANTY 4 LIFE. NOT FREE SOFTWARE YOU MUST PAY ME TO USE IT

from idlelib.percolator import Percolator
from idlelib.colorizer import ColorDelegator
import tkinter as tk
import subprocess


class ZApplication:

    def __init__(self, root):
        self.root = root
        self.theme_bg = "#242424"
        self.theme_fg = "#E9B96E"
        self.configure_weights()
        self.file_sequence = 0
        self.grid_w = 16
        self.grid_h = 12
        self.text_widgets = []
        self.create_grid_smz()
        self.create_s_buffer_register()
        self.create_buffer_register()
        self.create_menu()
        self.setup_keybindings()
        self.apply_theme()

    def setup_keybindings(self):
        # ctrl t = transpose char
        # ctrl b = cursor back
        # ctrl f = cursor fwd
        # ctrl k = Delete from cursor to end of line
        # ctrl d = delete
        # ctrl h = backspace
        # ctrl p = paragraph up
      	# ctr  i = insert tab
        # ctrl a = begin of line
        self.root.bind("<Control-Shift-Q>", self.quit_program)
        self.root.bind("<Control-Shift-Return>", self.execute_python_code)
        self.root.bind("<Alt-Shift-Return>", self.eval_python_code)
        self.root.bind("<Control-Return>", self.execute_bash_command)
        self.root.bind("<Control-q>", self.focus_buffer_register)
        self.root.bind("<Control-w>", self.focus_buffer_register)
        self.root.bind("<Control-y>", self.toggle_light_theme)
        self.root.bind("<Control-j>", self.toggle_dark_theme)
        self.root.bind("<Control-l>", self.clear_buffer_register)
        self.root.bind("<Control-Shift-L>", self.clear_s_buffer_register)
        self.root.bind("<Control-s>", self.save_buffer_register_to_file)
        self.root.bind("<Control-Shift-S>", self.save_s_buffer_register_to_file)
        self.root.bind("<Control-n>", self.top_of_buffer) #Laptop keyboard
        self.root.bind("<Control-m>", self.bottom_of_buffer) #^ same
        self.root.bind("<Control-Shift-A>", self.select_all_text)
        self.root.bind("<Control-i>", self.change_grid_layout_smz)
        self.root.bind("<Control-o>", self.change_grid_layout_z)
        self.buffer_register.bind("<KeyRelease>", self.update_cursor_position)
    
    def create_grid(self):
        for i in range(4):
            self.root.grid_rowconfigure(i, weight=1)
            row_widgets = []
            for j in range(4):
                self.root.grid_columnconfigure(j, weight=1)
                text_widget = tk.Text(self.root, width=self.grid_w, height=self.grid_h, bg=self.theme_bg, fg=self.theme_fg, highlightcolor="blue", insertbackground="red")
                text_widget.grid(row=i, column=j, padx=5, pady=5, sticky="nsew")
                row_widgets.append(text_widget)
            self.text_widgets.append(row_widgets)
        return self.text_widgets

    def create_grid_smz(self):
        for i in range(4):
            self.root.grid_rowconfigure(i, weight=1)  
            row_widgets = []
            for j in range(3):    
                self.root.grid_columnconfigure(j, weight=1) 
                text_widget = tk.Text(self.root, width=self.grid_w, height=self.grid_h, bg=self.theme_bg, fg=self.theme_fg, highlightcolor="purple",  insertbackground="red")
                text_widget.grid(row=i, column=j, padx=5, pady=5, sticky="nsew")
                row_widgets.append(text_widget)
                self.text_widgets.append(row_widgets)
        return self.text_widgets
    
    def create_s_buffer_register(self):
        self.s_buffer_register = tk.Text(self.root, width=99, height=self.grid_h, highlightcolor="red", insertbackground="green", bg=self.theme_bg, fg=self.theme_fg)
        self.s_buffer_register.grid(row=0, column=4, rowspan=1, sticky="nsew", padx=5, pady=5)
        return self.s_buffer_register
    
    def create_buffer_register(self):
        self.buffer_register = tk.Text(self.root, width=99, height=45, highlightcolor="red", insertbackground="orange", bg=self.theme_bg, fg=self.theme_fg)
        self.buffer_register.grid(row=1, column=4, rowspan=3, sticky="nsew", padx=5, pady=5)      
        Percolator(self.buffer_register).insertfilter(ColorDelegator())
        return self.buffer_register
    
    def create_menu(self):   
        self.menu_bar = tk.Menu(self.root, tearoff=0, bg=self.theme_bg, fg=self.theme_fg)
        self.menu_bar.add_command(label=" ", command=lambda: update_cursor_position(self.menu_bar))
        self.root.configure(menu=self.menu_bar)
   
    def change_grid_layout_smz(self, event=None):
        if self.text_widgets and self.buffer_register:
            for row in self.text_widgets:
                for widget in row:
                    widget.grid_forget()
        self.text_widgets = self.create_grid_smz()
 
    def change_grid_layout_z(self, event=None):
        if self.text_widgets:
            for row in self.text_widgets:
                for widget in row:
                    widget.grid_forget()
        self.text_widgets = self.create_grid()


    def configure_weights(self):
        for i in range(4):
            self.root.grid_rowconfigure(i, weight=1)
            for j in range(4):
                self.root.grid_columnconfigure(j, weight=1)
    
    def update_cursor_position(self, event): 
        cursor_position = self.buffer_register.index(tk.INSERT)
        self.menu_bar.entryconfig(0, label=f"                    #$%&*^ Zettlekastenrohk   ::  {cursor_position}")
    
 
    def quit_program(self, event=None):
        self.root.quit()

    def clear_buffer_register(self, event):
        self.buffer_register.delete("1.0", "end")

    def clear_s_buffer_register(self, event):
        self.s_buffer_register.delete("1.0", "end")        
        
    def select_all_text(self, event):
        event.widget.tag_add("sel", "1.0", "end")
    
    def top_of_buffer(self, event):
        event.widget.mark_set("insert", "1.0")

    def bottom_of_buffer(self, event):
        event.widget.mark_set("insert", "end")

    def focus_buffer_register(self, event):
        self.buffer_register.focus()
 
    def focus_s_buffer_register(self, event):
        self.s_buffer_register.focus()

    def toggle_light_theme(self, event=None):
        self.theme_bg = "#777777"
        self.theme_fg = "#000000"
        self.apply_theme()
        
    def toggle_dark_theme(self, event=None):
        self.theme_bg = "#242424"
        self.theme_fg = "#E9B96E"
        self.apply_theme()

    def apply_theme(self, event=None):
        for row in self.text_widgets:
            for text_widget in row:
                text_widget.config(bg=self.theme_bg, fg=self.theme_fg)
        self.buffer_register.config(bg=self.theme_bg, fg=self.theme_fg)
        self.s_buffer_register.config(bg=self.theme_bg, fg=self.theme_fg)

    def save_buffer_register_to_file(self, event):
        content = self.buffer_register.get("1.0", "end-1c")
        filename = f"g{self.file_sequence}"
        self.file_sequence += 1
        with open(filename, "w") as file:
            file.write(content)
        self.s_buffer_register.insert("1.0", f"#$%&*^  {filename} _Buffer Saved\n")

    def save_s_buffer_register_to_file(self, event):
        content = self.s_buffer_register.get("1.0", "end-1c")
        filename = f"s{self.file_sequence}"
        self.file_sequence += 1
        with open(filename, "w") as file:
            file.write(content)
        self.s_buffer_register.insert("1.0", f"#$%&*^  {filename} ^Buffer Saved\n")

    def execute_python_code(self, event):
        focused = self.root.focus_get()
        code = focused.get("1.0", "end-1c")
        try:
            exec(code, globals())
        except Exception as e:
            self.s_buffer_register.insert("1.0", f"Python Error:\n{str(e)}\n")
            self.s_buffer_register.mark_set("insert", "1.0")

    def eval_python_code(self, event):
        focused = self.root.focus_get()
        code = focused.get("1.0", "end-1c")
        try:
            output = eval(code, globals())
            self.buffer_register.insert("1.0", f"py-eval:\n{output}\n")
            self.buffer_register.mark_set("insert", "1.0")
        except Exception as e:
            self.s_buffer_register.insert("1.0", f"py-3rR0r:\n{str(e)}\n")
            self.s_buffer_register.mark_set("insert", "1.0")

    def execute_bash_command(self, event):
        focused = self.root.focus_get()
        command = focused.get("current linestart", "end-1c")  
        try:
            result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            if result.returncode == 0:
                focused.insert("insert-1c linestart", f"# ")           
                self.buffer_register.insert("1.0", f"{result.stdout}\n")

            else:
                focused.insert("insert-1c linestart", f"# ")
                self.s_buffer_register.insert("1.0", f"#$%&*^ H4x0R-3rR0r!\n")
                self.s_buffer_register.insert("1.0 + 19c", f"\n{result.stderr}\n")
        except Exception as e:
            focused.insert("insert-1c linestart", f"# ")
            self.s_buffer_register.insert("1.0", f"#$%&*^ 0fux_! {str(e)}\n")
  
          
if __name__ == "__main__":
    root = tk.Tk()
    root.title("#$%&*^ zkr")
    root.configure(background="#000000")
    app = ZApplication(root)
    root.mainloop()






